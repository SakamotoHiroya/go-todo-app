// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type OauthProvider string

const (
	OauthProviderGoogle OauthProvider = "google"
)

func (e *OauthProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OauthProvider(s)
	case string:
		*e = OauthProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for OauthProvider: %T", src)
	}
	return nil
}

type NullOauthProvider struct {
	OauthProvider OauthProvider `json:"oauth_provider"`
	Valid         bool          `json:"valid"` // Valid is true if OauthProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOauthProvider) Scan(value interface{}) error {
	if value == nil {
		ns.OauthProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OauthProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOauthProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OauthProvider), nil
}

type TaskStatus string

const (
	TaskStatusInProgress TaskStatus = "in_progress"
	TaskStatusDone       TaskStatus = "done"
	TaskStatusCanceled   TaskStatus = "canceled"
)

func (e *TaskStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskStatus(s)
	case string:
		*e = TaskStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskStatus: %T", src)
	}
	return nil
}

type NullTaskStatus struct {
	TaskStatus TaskStatus `json:"task_status"`
	Valid      bool       `json:"valid"` // Valid is true if TaskStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TaskStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskStatus), nil
}

type UserStatus string

const (
	UserStatusActive    UserStatus = "active"
	UserStatusInactive  UserStatus = "inactive"
	UserStatusSuspended UserStatus = "suspended"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type Task struct {
	ID          int64          `json:"id"`
	Title       string         `json:"title"`
	Detail      sql.NullString `json:"detail"`
	Status      TaskStatus     `json:"status"`
	TaskGroupID int64          `json:"task_group_id"`
	OwnerUserID int64          `json:"owner_user_id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type TaskAssignee struct {
	ID     int64 `json:"id"`
	TaskID int64 `json:"task_id"`
	UserID int64 `json:"user_id"`
}

type TaskGroup struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	OwnerUserID sql.NullInt64 `json:"owner_user_id"`
}

type TaskGroupMember struct {
	ID          int64 `json:"id"`
	TaskGroupID int64 `json:"task_group_id"`
	UserID      int64 `json:"user_id"`
}

type User struct {
	ID             int64          `json:"id"`
	Provider       OauthProvider  `json:"provider"`
	ProviderUserID string         `json:"provider_user_id"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	AvatarUrl      sql.NullString `json:"avatar_url"`
	Status         UserStatus     `json:"status"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}
