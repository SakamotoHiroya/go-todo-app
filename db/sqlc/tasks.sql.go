// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"
	"database/sql"
)

const assignTaskToUser = `-- name: AssignTaskToUser :exec
INSERT INTO task_assignees (
  task_id,
  user_id
) VALUES (
  $1, $2
)
`

type AssignTaskToUserParams struct {
	TaskID int64 `json:"task_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) AssignTaskToUser(ctx context.Context, arg AssignTaskToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignTaskToUser, arg.TaskID, arg.UserID)
	return err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  title,
  detail,
  status,
  task_group_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING
  id,
  title,
  detail,
  status,
  task_group_id,
  created_at,
  updated_at
`

type CreateTaskParams struct {
	Title       string         `json:"title"`
	Detail      sql.NullString `json:"detail"`
	Status      TaskStatus     `json:"status"`
	TaskGroupID int64          `json:"task_group_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Detail,
		arg.Status,
		arg.TaskGroupID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Detail,
		&i.Status,
		&i.TaskGroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE
  id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT
  id,
  title,
  detail,
  status,
  task_group_id,
  created_at,
  updated_at
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Detail,
		&i.Status,
		&i.TaskGroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT
  id,
  title,
  detail,
  status,
  task_group_id,
  created_at,
  updated_at
FROM tasks
ORDER BY id
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Detail,
			&i.Status,
			&i.TaskGroupID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByUser = `-- name: ListTasksByUser :many
SELECT
  t.id,
  t.title,
  t.detail,
  t.status,
  t.task_group_id,
  t.created_at,
  t.updated_at
FROM tasks AS t
JOIN task_assignees AS a
  ON t.id = a.task_id
WHERE
  a.user_id = $1
ORDER BY t.id
`

func (q *Queries) ListTasksByUser(ctx context.Context, userID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Detail,
			&i.Status,
			&i.TaskGroupID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByTask = `-- name: ListUsersByTask :many
SELECT
  u.id,
  u.provider,
  u.provider_user_id,
  u.email,
  u.name,
  u.avatar_url,
  u.status,
  u.created_at,
  u.updated_at
FROM users AS u
JOIN task_assignees AS a
  ON u.id = a.user_id
WHERE
  a.task_id = $1
ORDER BY u.id
`

func (q *Queries) ListUsersByTask(ctx context.Context, taskID int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Provider,
			&i.ProviderUserID,
			&i.Email,
			&i.Name,
			&i.AvatarUrl,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unassignTaskFromUser = `-- name: UnassignTaskFromUser :exec
DELETE FROM task_assignees
WHERE
  task_id = $1
  AND user_id = $2
`

type UnassignTaskFromUserParams struct {
	TaskID int64 `json:"task_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) UnassignTaskFromUser(ctx context.Context, arg UnassignTaskFromUserParams) error {
	_, err := q.db.ExecContext(ctx, unassignTaskFromUser, arg.TaskID, arg.UserID)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET
  title          = $1,
  detail         = $2,
  status         = $3,
  task_group_id  = $4,
  updated_at     = NOW()
WHERE
  id = $5
`

type UpdateTaskParams struct {
	Title       string         `json:"title"`
	Detail      sql.NullString `json:"detail"`
	Status      TaskStatus     `json:"status"`
	TaskGroupID int64          `json:"task_group_id"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Title,
		arg.Detail,
		arg.Status,
		arg.TaskGroupID,
		arg.ID,
	)
	return err
}
