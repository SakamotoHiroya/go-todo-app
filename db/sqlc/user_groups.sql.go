// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_groups.sql

package db

import (
	"context"
)

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO user_group_members (
  user_id,
  group_id
) VALUES (
  $1, $2
)
`

type AddUserToGroupParams struct {
	UserID  int64 `json:"user_id"`
	GroupID int64 `json:"group_id"`
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addUserToGroup, arg.UserID, arg.GroupID)
	return err
}

const createUserGroup = `-- name: CreateUserGroup :one
INSERT INTO user_groups (
  name
) VALUES (
  $1
)
RETURNING
  id,
  name
`

func (q *Queries) CreateUserGroup(ctx context.Context, name string) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, createUserGroup, name)
	var i UserGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteUserGroup = `-- name: DeleteUserGroup :exec
DELETE FROM user_groups
WHERE
  id = $1
`

func (q *Queries) DeleteUserGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserGroup, id)
	return err
}

const getUserGroupByID = `-- name: GetUserGroupByID :one
SELECT
  id,
  name
FROM user_groups
WHERE id = $1
`

func (q *Queries) GetUserGroupByID(ctx context.Context, id int64) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, getUserGroupByID, id)
	var i UserGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listGroupsByUser = `-- name: ListGroupsByUser :many
SELECT
  g.id,
  g.name
FROM user_groups AS g
JOIN user_group_members AS m
  ON g.id = m.group_id
WHERE
  m.user_id = $1
ORDER BY g.id
`

func (q *Queries) ListGroupsByUser(ctx context.Context, userID int64) ([]UserGroup, error) {
	rows, err := q.db.QueryContext(ctx, listGroupsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserGroup{}
	for rows.Next() {
		var i UserGroup
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserGroups = `-- name: ListUserGroups :many
SELECT
  id,
  name
FROM user_groups
ORDER BY id
`

func (q *Queries) ListUserGroups(ctx context.Context) ([]UserGroup, error) {
	rows, err := q.db.QueryContext(ctx, listUserGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserGroup{}
	for rows.Next() {
		var i UserGroup
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByGroup = `-- name: ListUsersByGroup :many
SELECT
  u.id,
  u.provider,
  u.provider_user_id,
  u.email,
  u.name,
  u.avatar_url,
  u.status,
  u.created_at,
  u.updated_at
FROM users AS u
JOIN user_group_members AS m
  ON u.id = m.user_id
WHERE
  m.group_id = $1
ORDER BY u.id
`

func (q *Queries) ListUsersByGroup(ctx context.Context, groupID int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Provider,
			&i.ProviderUserID,
			&i.Email,
			&i.Name,
			&i.AvatarUrl,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromGroup = `-- name: RemoveUserFromGroup :exec
DELETE FROM user_group_members
WHERE
  user_id  = $1
  AND group_id = $2
`

type RemoveUserFromGroupParams struct {
	UserID  int64 `json:"user_id"`
	GroupID int64 `json:"group_id"`
}

func (q *Queries) RemoveUserFromGroup(ctx context.Context, arg RemoveUserFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromGroup, arg.UserID, arg.GroupID)
	return err
}

const updateUserGroup = `-- name: UpdateUserGroup :exec
UPDATE user_groups
SET
  name = $1
WHERE
  id = $2
`

type UpdateUserGroupParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateUserGroup(ctx context.Context, arg UpdateUserGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateUserGroup, arg.Name, arg.ID)
	return err
}
