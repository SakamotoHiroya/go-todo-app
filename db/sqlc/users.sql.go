// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  provider,
  provider_user_id,
  email,
  name,
  avatar_url
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING
  id,
  provider,
  provider_user_id,
  email,
  name,
  avatar_url,
  status,
  created_at,
  updated_at
`

type CreateUserParams struct {
	Provider       OauthProvider  `json:"provider"`
	ProviderUserID string         `json:"provider_user_id"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	AvatarUrl      sql.NullString `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Provider,
		arg.ProviderUserID,
		arg.Email,
		arg.Name,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
  id,
  provider,
  provider_user_id,
  email,
  name,
  avatar_url,
  status,
  created_at,
  updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id,
  provider,
  provider_user_id,
  email,
  name,
  avatar_url,
  status,
  created_at,
  updated_at
FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Provider,
			&i.ProviderUserID,
			&i.Email,
			&i.Name,
			&i.AvatarUrl,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const logicalDeleteUser = `-- name: LogicalDeleteUser :exec
UPDATE users
SET
  status = 'inactive'
WHERE
  id = $1
`

func (q *Queries) LogicalDeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, logicalDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  email      = $1,
  name       = $2,
  avatar_url = $3,
  updated_at = NOW()
WHERE
  id = $4
`

type UpdateUserParams struct {
	Email     string         `json:"email"`
	Name      sql.NullString `json:"name"`
	AvatarUrl sql.NullString `json:"avatar_url"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Name,
		arg.AvatarUrl,
		arg.ID,
	)
	return err
}
