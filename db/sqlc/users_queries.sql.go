// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users_queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (
  provider,
  provider_user_id,
  email,
  name,
  status
) VALUES (
  $1,  -- provider (oauth_provider)
  $2,  -- provider_user_id
  $3,  -- email
  $4,  -- name
  $5   -- status (user_status)
)
RETURNING
  id,
  provider,
  provider_user_id,
  email,
  name,
  status,
  created_at,
  updated_at
`

type CreateUserParams struct {
	Provider       OauthProvider  `json:"provider"`
	ProviderUserID string         `json:"provider_user_id"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Status         UserStatus     `json:"status"`
}

type CreateUserRow struct {
	ID             int64          `json:"id"`
	Provider       OauthProvider  `json:"provider"`
	ProviderUserID string         `json:"provider_user_id"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Status         UserStatus     `json:"status"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

// ============================
// Table: users
// ============================
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Provider,
		arg.ProviderUserID,
		arg.Email,
		arg.Name,
		arg.Status,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one

SELECT
  id,
  provider,
  provider_user_id,
  email,
  name,
  status,
  created_at,
  updated_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID             int64          `json:"id"`
	Provider       OauthProvider  `json:"provider"`
	ProviderUserID string         `json:"provider_user_id"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Status         UserStatus     `json:"status"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

// id
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
  id,
  provider,
  provider_user_id,
  email,
  name,
  status,
  created_at,
  updated_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID             int64          `json:"id"`
	Provider       OauthProvider  `json:"provider"`
	ProviderUserID string         `json:"provider_user_id"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Status         UserStatus     `json:"status"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many

SELECT
  id,
  provider,
  provider_user_id,
  email,
  name,
  status,
  created_at,
  updated_at
FROM users
ORDER BY created_at DESC
`

type ListUsersRow struct {
	ID             int64          `json:"id"`
	Provider       OauthProvider  `json:"provider"`
	ProviderUserID string         `json:"provider_user_id"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Status         UserStatus     `json:"status"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

// email
func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Provider,
			&i.ProviderUserID,
			&i.Email,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  provider          = $2,  -- provider
  provider_user_id  = $3,  -- provider_user_id
  email             = $4,  -- email
  name              = $5,  -- name
  status            = $6,  -- status (user_status)
  updated_at        = NOW()
WHERE id = $1        -- id
RETURNING
  id,
  provider,
  provider_user_id,
  email,
  name,
  status,
  created_at,
  updated_at
`

type UpdateUserParams struct {
	ID             int64          `json:"id"`
	Provider       OauthProvider  `json:"provider"`
	ProviderUserID string         `json:"provider_user_id"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Status         UserStatus     `json:"status"`
}

type UpdateUserRow struct {
	ID             int64          `json:"id"`
	Provider       OauthProvider  `json:"provider"`
	ProviderUserID string         `json:"provider_user_id"`
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	Status         UserStatus     `json:"status"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Provider,
		arg.ProviderUserID,
		arg.Email,
		arg.Name,
		arg.Status,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
