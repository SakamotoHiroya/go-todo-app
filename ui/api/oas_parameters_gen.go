// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// TaskGroupsGroupIdDeleteParams is parameters of DELETE /task-groups/{groupId} operation.
type TaskGroupsGroupIdDeleteParams struct {
	GroupId string
}

func unpackTaskGroupsGroupIdDeleteParams(packed middleware.Parameters) (params TaskGroupsGroupIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "groupId",
			In:   "path",
		}
		params.GroupId = packed[key].(string)
	}
	return params
}

func decodeTaskGroupsGroupIdDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params TaskGroupsGroupIdDeleteParams, _ error) {
	// Decode path: groupId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TaskGroupsGroupIdGetParams is parameters of GET /task-groups/{groupId} operation.
type TaskGroupsGroupIdGetParams struct {
	GroupId string
}

func unpackTaskGroupsGroupIdGetParams(packed middleware.Parameters) (params TaskGroupsGroupIdGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "groupId",
			In:   "path",
		}
		params.GroupId = packed[key].(string)
	}
	return params
}

func decodeTaskGroupsGroupIdGetParams(args [1]string, argsEscaped bool, r *http.Request) (params TaskGroupsGroupIdGetParams, _ error) {
	// Decode path: groupId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TaskGroupsGroupIdTasksGetParams is parameters of GET /task-groups/{groupId}/tasks operation.
type TaskGroupsGroupIdTasksGetParams struct {
	GroupId string
}

func unpackTaskGroupsGroupIdTasksGetParams(packed middleware.Parameters) (params TaskGroupsGroupIdTasksGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "groupId",
			In:   "path",
		}
		params.GroupId = packed[key].(string)
	}
	return params
}

func decodeTaskGroupsGroupIdTasksGetParams(args [1]string, argsEscaped bool, r *http.Request) (params TaskGroupsGroupIdTasksGetParams, _ error) {
	// Decode path: groupId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TaskGroupsGroupIdTasksPostParams is parameters of POST /task-groups/{groupId}/tasks operation.
type TaskGroupsGroupIdTasksPostParams struct {
	GroupId string
}

func unpackTaskGroupsGroupIdTasksPostParams(packed middleware.Parameters) (params TaskGroupsGroupIdTasksPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "groupId",
			In:   "path",
		}
		params.GroupId = packed[key].(string)
	}
	return params
}

func decodeTaskGroupsGroupIdTasksPostParams(args [1]string, argsEscaped bool, r *http.Request) (params TaskGroupsGroupIdTasksPostParams, _ error) {
	// Decode path: groupId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TaskGroupsGroupIdUsersPostParams is parameters of POST /task-groups/{groupId}/users operation.
type TaskGroupsGroupIdUsersPostParams struct {
	GroupId string
}

func unpackTaskGroupsGroupIdUsersPostParams(packed middleware.Parameters) (params TaskGroupsGroupIdUsersPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "groupId",
			In:   "path",
		}
		params.GroupId = packed[key].(string)
	}
	return params
}

func decodeTaskGroupsGroupIdUsersPostParams(args [1]string, argsEscaped bool, r *http.Request) (params TaskGroupsGroupIdUsersPostParams, _ error) {
	// Decode path: groupId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TaskGroupsGroupIdUsersUserIdDeleteParams is parameters of DELETE /task-groups/{groupId}/users/{userId} operation.
type TaskGroupsGroupIdUsersUserIdDeleteParams struct {
	GroupId string
	UserId  string
}

func unpackTaskGroupsGroupIdUsersUserIdDeleteParams(packed middleware.Parameters) (params TaskGroupsGroupIdUsersUserIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "groupId",
			In:   "path",
		}
		params.GroupId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "path",
		}
		params.UserId = packed[key].(string)
	}
	return params
}

func decodeTaskGroupsGroupIdUsersUserIdDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params TaskGroupsGroupIdUsersUserIdDeleteParams, _ error) {
	// Decode path: groupId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: userId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TasksTaskIdDeleteParams is parameters of DELETE /tasks/{taskId} operation.
type TasksTaskIdDeleteParams struct {
	TaskId string
}

func unpackTasksTaskIdDeleteParams(packed middleware.Parameters) (params TasksTaskIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeTasksTaskIdDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params TasksTaskIdDeleteParams, _ error) {
	// Decode path: taskId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TasksTaskIdGetParams is parameters of GET /tasks/{taskId} operation.
type TasksTaskIdGetParams struct {
	TaskId string
}

func unpackTasksTaskIdGetParams(packed middleware.Parameters) (params TasksTaskIdGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeTasksTaskIdGetParams(args [1]string, argsEscaped bool, r *http.Request) (params TasksTaskIdGetParams, _ error) {
	// Decode path: taskId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TasksTaskIdPutParams is parameters of PUT /tasks/{taskId} operation.
type TasksTaskIdPutParams struct {
	TaskId string
}

func unpackTasksTaskIdPutParams(packed middleware.Parameters) (params TasksTaskIdPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeTasksTaskIdPutParams(args [1]string, argsEscaped bool, r *http.Request) (params TasksTaskIdPutParams, _ error) {
	// Decode path: taskId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TasksTaskIdStatusPatchParams is parameters of PATCH /tasks/{taskId}/status operation.
type TasksTaskIdStatusPatchParams struct {
	TaskId string
}

func unpackTasksTaskIdStatusPatchParams(packed middleware.Parameters) (params TasksTaskIdStatusPatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "taskId",
			In:   "path",
		}
		params.TaskId = packed[key].(string)
	}
	return params
}

func decodeTasksTaskIdStatusPatchParams(args [1]string, argsEscaped bool, r *http.Request) (params TasksTaskIdStatusPatchParams, _ error) {
	// Decode path: taskId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "taskId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TaskId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "taskId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UsersUserIdDeleteParams is parameters of DELETE /users/{userId} operation.
type UsersUserIdDeleteParams struct {
	UserId string
}

func unpackUsersUserIdDeleteParams(packed middleware.Parameters) (params UsersUserIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "path",
		}
		params.UserId = packed[key].(string)
	}
	return params
}

func decodeUsersUserIdDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params UsersUserIdDeleteParams, _ error) {
	// Decode path: userId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
