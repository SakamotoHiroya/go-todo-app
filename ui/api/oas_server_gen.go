// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// LoginPost implements POST /login operation.
	//
	// ログイン.
	//
	// POST /login
	LoginPost(ctx context.Context) (*Token, error)
	// TaskGroupsGet implements GET /task-groups operation.
	//
	// 所属グループ一覧取得.
	//
	// GET /task-groups
	TaskGroupsGet(ctx context.Context) ([]TaskGroup, error)
	// TaskGroupsGroupIdDelete implements DELETE /task-groups/{groupId} operation.
	//
	// グループ削除.
	//
	// DELETE /task-groups/{groupId}
	TaskGroupsGroupIdDelete(ctx context.Context, params TaskGroupsGroupIdDeleteParams) error
	// TaskGroupsGroupIdGet implements GET /task-groups/{groupId} operation.
	//
	// グループ詳細取得.
	//
	// GET /task-groups/{groupId}
	TaskGroupsGroupIdGet(ctx context.Context, params TaskGroupsGroupIdGetParams) (*TaskGroupDetail, error)
	// TaskGroupsGroupIdTasksGet implements GET /task-groups/{groupId}/tasks operation.
	//
	// タスク一覧取得.
	//
	// GET /task-groups/{groupId}/tasks
	TaskGroupsGroupIdTasksGet(ctx context.Context, params TaskGroupsGroupIdTasksGetParams) ([]Task, error)
	// TaskGroupsGroupIdTasksPost implements POST /task-groups/{groupId}/tasks operation.
	//
	// タスク作成.
	//
	// POST /task-groups/{groupId}/tasks
	TaskGroupsGroupIdTasksPost(ctx context.Context, params TaskGroupsGroupIdTasksPostParams) (*Task, error)
	// TaskGroupsGroupIdUsersPost implements POST /task-groups/{groupId}/users operation.
	//
	// ユーザ招待.
	//
	// POST /task-groups/{groupId}/users
	TaskGroupsGroupIdUsersPost(ctx context.Context, params TaskGroupsGroupIdUsersPostParams) (*TaskGroupDetail, error)
	// TaskGroupsGroupIdUsersUserIdDelete implements DELETE /task-groups/{groupId}/users/{userId} operation.
	//
	// グループからユーザを削除.
	//
	// DELETE /task-groups/{groupId}/users/{userId}
	TaskGroupsGroupIdUsersUserIdDelete(ctx context.Context, params TaskGroupsGroupIdUsersUserIdDeleteParams) error
	// TaskGroupsPost implements POST /task-groups operation.
	//
	// タスクグループ作成.
	//
	// POST /task-groups
	TaskGroupsPost(ctx context.Context) (*TaskGroup, error)
	// TasksTaskIdDelete implements DELETE /tasks/{taskId} operation.
	//
	// タスク削除.
	//
	// DELETE /tasks/{taskId}
	TasksTaskIdDelete(ctx context.Context, params TasksTaskIdDeleteParams) error
	// TasksTaskIdGet implements GET /tasks/{taskId} operation.
	//
	// タスク詳細取得.
	//
	// GET /tasks/{taskId}
	TasksTaskIdGet(ctx context.Context, params TasksTaskIdGetParams) (*Task, error)
	// TasksTaskIdPut implements PUT /tasks/{taskId} operation.
	//
	// タスク更新.
	//
	// PUT /tasks/{taskId}
	TasksTaskIdPut(ctx context.Context, params TasksTaskIdPutParams) (*Task, error)
	// TasksTaskIdStatusPatch implements PATCH /tasks/{taskId}/status operation.
	//
	// タスクステータス変更.
	//
	// PATCH /tasks/{taskId}/status
	TasksTaskIdStatusPatch(ctx context.Context, params TasksTaskIdStatusPatchParams) (*Task, error)
	// UsersPost implements POST /users operation.
	//
	// ユーザ登録.
	//
	// POST /users
	UsersPost(ctx context.Context) (*User, error)
	// UsersUserIdDelete implements DELETE /users/{userId} operation.
	//
	// ユーザ削除.
	//
	// DELETE /users/{userId}
	UsersUserIdDelete(ctx context.Context, params UsersUserIdDeleteParams) error
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
